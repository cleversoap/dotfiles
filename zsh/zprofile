export XDG_CONFIG_HOME=$HOME/.config
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CACHE_HOME=$HOME/.cache
export XDG_BIN_HOME=$HOME/.local/bin
export PATH=$XDG_BIN_HOME:$PATH

# ZGen
# This needs to be in the home directory as it is technically honouring ZDOTDIR
# which is not always going to reflect XDG specs
export ZGEN_HOME="${HOME}/.zgen"

# CLV Script config
export CLV_ROOT="${ZGEN_HOME}/cleversoap/clv-master"

source "${ZGEN_HOME}/zgen.zsh"

if ! zgen saved; then

    # CLV
    zgen load cleversoap/clv

    # Other plugins
    zgen load mafredri/zsh-async
    zgen load zsh-users/zsh-autosuggestions
    zgen load zsh-users/zsh-completions
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load zsh-users/zsh-history-substring-search

    if which fzf > /dev/null 2>&1; then
        zgen load junegunn/fzf shell
    fi

    zgen load sindresorhus/pure

    # Save init.zsh for immediate startup next time
    zgen save

fi

# clv needs to be autoloaded and readily available - needs to be done this
# way to make certain it's loaded as zgen is unreliable in some environments
# and the autoload won't always work on first call either
# For example, calling `clv env init` doesn't actually trigger the autoload
autoload -Uz clv && clv ''

# Setup environments
export ENV_HOME="${XDG_DATA_HOME}/env"

if [ -d $ENV_HOME ]; then
    export CLV_ENVS=(`for i in $(ls -d $ENV_HOME/*); do basename $i; done`)

    # Some plugins require extra init steps, they are checked for and added
    cei_plugins=()

    # If the pyenv-virtualenv plugin exists
    if [ -d $ENV_HOME/pyenv/plugins/pyenv-virtualenv ]; then
        cei_plugins+="pyenv virtualenv-init"
    fi

    # Call the plugin inits
    export CLV_ENVS_INIT_PLUGINS=$cei_plugins

    # Initialise all environments and plugins
    clv env init
fi

export PATH="$HOME/.cargo/bin:$PATH"

# Deduplicate the path, with the env plugins this can be necessary on occasion
dedupe_path() {
  typeset -a paths result
  paths=($path)

  while [[ ${#paths} -gt 0 ]]; do
    p="${paths[1]}"
    shift paths
    [[ -z ${paths[(r)$p]} ]] && result+="$p"
  done

  export PATH=${(j+:+)result}
}

dedupe_path
